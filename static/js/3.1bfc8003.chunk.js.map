{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","CheckoutSummary","ContactData","checkoutSummary","react_default","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","state","orderForm","name","type","placeholder","autoComplete","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","formIsValid","loading","orderHandler","event","preventDefault","_this","setState","formData","formElementIdentifier","order","price","orderData","userId","axios","post","token","then","response","onFetchIngredients","history","catch","error","inputChangedHandler","inputIdentifier","updatedOrderForm","objectSpread","updatedFormElement","target","checkValidity","rules","isValid","trim","length","test","_this2","this","formElementsArray","id","config","form","onSubmit","formElement","disabled","Spinner","Component","connect","auth","dispatch","fetchIngredients","Checkout","checkoutCancelledHandler","goBack","checkoutContinuedHandler","replace","react_router","path","match","render","Checkout_ContactData_ContactData","totalPrice"],"mappings":"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","file":"static/js/3.1bfc8003.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1pk7x\",\"Label\":\"Input_Label__16Dqb\",\"InputElement\":\"Input_InputElement__QK3zC\",\"Invalid\":\"Input_Invalid__Cw3VV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1z9OT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__tKgqZ\"};","import React from 'react';\n\nimport Burger from '../../Burger/Burger';\nimport Button from '../../UI/Button/Button';\nimport classes from './CheckoutSummary.module.css';\n\nconst checkoutSummary = (props) => {\n    return (\n        <div className={classes.CheckoutSummary}>\n            <h1>We hope it tastes well!</h1>\n            <div style={{width: '100%', margin: 'auto'}}>\n                <Burger ingredients={props.ingredients}/>\n            </div>\n            <Button \n                btnType=\"Danger\"\n                clicked={props.checkoutCancelled}>CANCEL</Button>\n            <Button \n                btnType=\"Success\"\n                clicked={props.checkoutContinued}>CONTINUE</Button>\n        </div>\n    );\n}\n\nexport default checkoutSummary;","import React, { Component } from 'react';\nimport Button from '../../../components/UI/Button/Button';\nimport Spinner from '../../../components/UI/Spinner/Spinner';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Input from '../../../components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport { fetchIngredients } from '../../../store/actions/ingredientsActions';\n\nclass ContactData extends Component {\n    state = {\n        orderForm: {\n            name: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    name:'name',\n                    placeholder: 'Your Name',\n                    autoComplete:'name'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            street: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    name:'address',\n                    autoComplete:'street-address',\n                    placeholder: 'Street'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            zipCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    name:'postal',\n                    placeholder: 'ZIP Code',\n                    autoComplete:'postal-code'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    minLength: 5,\n                    maxLength: 5,\n                    isNumeric: true\n                },\n                valid: false,\n                touched: false\n            },\n            country: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    name:'country',\n                    autoComplete:'country',\n                    placeholder: 'Country'\n                },\n                value: '',\n                validation: {\n                    required: true\n                },\n                valid: false,\n                touched: false\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    name:'email',\n                    autoComplete:'email',\n                    placeholder: 'Your E-Mail'\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    isEmail: true\n                },\n                valid: false,\n                touched: false\n            },\n            deliveryMethod: {\n                elementType: 'select',\n                elementConfig: {\n                    options: [\n                        {value: 'fastest', displayValue: 'Fastest'},\n                        {value: 'cheapest', displayValue: 'Cheapest'}\n                    ]\n                },\n                value: '',\n                validation: {},\n                valid: true\n            }\n        },\n        formIsValid: false,\n        loading: false\n    }\n\n    orderHandler = ( event ) => {\n        event.preventDefault();\n        this.setState( { loading: true } );\n        const formData = {};\n        for (let formElementIdentifier in this.state.orderForm) {\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n        }\n        const order = {\n            ingredients: this.props.ingredients,\n            price: this.props.price,\n            orderData: formData,\n            userId:this.props.userId\n        }\n        axios.post( '/orders.json?auth='+this.props.token, order )\n            .then( response => {\n                this.setState( { loading: false } );\n                this.props.onFetchIngredients()\n                this.props.history.push( '/' );\n            } )\n            .catch( error => {\n                this.setState( { loading: false } );\n            } );\n    }\n\n    checkValidity(value, rules) {\n        let isValid = true;\n        if (!rules) {\n            return true;\n        }\n\n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n\n        if (rules.minLength) {\n            isValid = value.length >= rules.minLength && isValid\n        }\n\n        if (rules.maxLength) {\n            isValid = value.length <= rules.maxLength && isValid\n        }\n\n        if (rules.isEmail) {\n            const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        if (rules.isNumeric) {\n            const pattern = /^\\d+$/;\n            isValid = pattern.test(value) && isValid\n        }\n\n        return isValid;\n    }\n\n    inputChangedHandler = (event, inputIdentifier) => {\n        const updatedOrderForm = {\n            ...this.state.orderForm\n        };\n        const updatedFormElement = {\n            ...updatedOrderForm[inputIdentifier]\n        };\n        updatedFormElement.value = event.target.value;\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\n        updatedFormElement.touched = true;\n        updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n        let formIsValid = true;\n        for (let inputIdentifier in updatedOrderForm) {\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n        }\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\n    }\n\n    render () {\n        const formElementsArray = [];\n        for (let key in this.state.orderForm) {\n            formElementsArray.push({\n                id: key,\n                config: this.state.orderForm[key]\n            });\n        }\n        let form = (\n            <form onSubmit={this.orderHandler}>\n                {formElementsArray.map(formElement => (\n                    <Input\n                        key={formElement.id}\n                        elementType={formElement.config.elementType}\n                        elementConfig={formElement.config.elementConfig}\n                        value={formElement.config.value}\n                        invalid={!formElement.config.valid}\n                        shouldValidate={formElement.config.validation}\n                        touched={formElement.config.touched}\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\n                ))}\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\n            </form>\n        );\n        if ( this.state.loading ) {\n            form = <Spinner />;\n        }\n        return (\n            <div className={classes.ContactData}>\n                <h4>Enter your Contact Data</h4>\n                {form}\n            </div>\n        );\n    }\n}\nconst mapStateToProps =state =>({\n  token:state.auth.token,\n  userId:state.auth.userId\n})\nconst mapDispatchToProps = dispatch =>({\n  onFetchIngredients: () => dispatch(fetchIngredients())\n})\nexport default connect(mapStateToProps,mapDispatchToProps)(ContactData);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\n\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\nimport ContactData from './ContactData/ContactData';\nimport { connect } from 'react-redux';\nclass Checkout extends Component {\n\n\n    componentWillMount () {\n\n    }\n\n    checkoutCancelledHandler = () => {\n        this.props.history.goBack();\n    }\n\n    checkoutContinuedHandler = () => {\n        this.props.history.replace( '/checkout/contact-data' );\n    }\n\n    render () {\n        return (\n            <div>\n                <CheckoutSummary\n                    ingredients={this.props.ingredients}\n                    checkoutCancelled={this.checkoutCancelledHandler}\n                    checkoutContinued={this.checkoutContinuedHandler} />\n                <Route\n                    path={this.props.match.path + '/contact-data'}\n                    render={(props) => (<ContactData ingredients={this.props.ingredients} price={this.props.totalPrice} {...props} />)} />\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state =>({\n  ingredients:state.ingredients.ingredients,\n  totalPrice:state.totalPrice.totalPrice\n})\n\nexport default connect(mapStateToProps)(Checkout);\n"],"sourceRoot":""}