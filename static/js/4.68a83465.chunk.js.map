{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_Input_module_css__WEBPACK_IMPORTED_MODULE_1__","_Input_module_css__WEBPACK_IMPORTED_MODULE_1___default","input","props","inputElement","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","Input","Label","label","module","exports","AuthData","Auth","state","controls","email","type","name","autoComplete","placeholder","validation","required","isEmail","valid","password","minLength","formIsValid","isSignUp","submitHandler","event","preventDefault","_this","onAuthStart","inputChangedHandler","inputIdentifier","updatedControls","C_React_my_burger_builder_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","updatedFormElement","target","checkValidity","setState","switchAuthModeHandler","prevState","rules","isValid","trim","length","maxLength","test","isNumeric","_this2","this","formElementsArray","id","config","form","formElement","react__WEBPACK_IMPORTED_MODULE_6___default","_components_UI_Input_Input__WEBPACK_IMPORTED_MODULE_7__","loading","_components_UI_Spinner_Spinner__WEBPACK_IMPORTED_MODULE_12__","isAuthenticated","react_router_dom__WEBPACK_IMPORTED_MODULE_15__","to","error","concat","message","onSubmit","_components_UI_Button_Button__WEBPACK_IMPORTED_MODULE_8__","btnType","clicked","Component","connect","auth","token","dispatch","actions","withErrorHandler","axios"],"mappings":"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","file":"static/js/4.68a83465.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Input.module.css';\n\nconst input = ( props ) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement];\n\n    if (props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n\n    switch ( props.elementType ) {\n        case ( 'input' ):\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'textarea' ):\n            inputElement = <textarea\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n            break;\n        case ( 'select' ):\n            inputElement = (\n                <select\n                    className={inputClasses.join(' ')}\n                    value={props.value}\n                    onChange={props.changed}>\n                    {props.elementConfig.options.map(option => (\n                        <option key={option.value} value={option.value}>\n                            {option.displayValue}\n                        </option>\n                    ))}\n                </select>\n            );\n            break;\n        default:\n            inputElement = <input\n                className={inputClasses.join(' ')}\n                {...props.elementConfig}\n                value={props.value}\n                onChange={props.changed} />;\n    }\n\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    );\n\n};\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1pk7x\",\"Label\":\"Input_Label__16Dqb\",\"InputElement\":\"Input_InputElement__QK3zC\",\"Invalid\":\"Input_Invalid__Cw3VV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthData\":\"Auth_AuthData__1-ivS\"};","import React , { Component } from 'react';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/auth';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport withErrorHandler  from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport axios from '../../axios-orders'\r\nimport { Redirect } from 'react-router-dom'\r\nclass Auth extends Component {\r\n  state={\r\n    controls:{\r\n\r\n      email: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n              type: 'email',\r\n              name:'email',\r\n              autoComplete:'email',\r\n              placeholder: 'Your E-Mail'\r\n          },\r\n          value: '',\r\n          validation: {\r\n              required: true,\r\n              isEmail: true\r\n          },\r\n          valid: false,\r\n          touched: false\r\n      },\r\n      password: {\r\n          elementType: 'input',\r\n          elementConfig: {\r\n              type: 'password',\r\n              name:'password',\r\n              placeholder: 'Your password',\r\n              autoComplete:'password'\r\n          },\r\n          value: '',\r\n          validation: {\r\n              required: true,\r\n              minLength:7\r\n          },\r\n          valid: false,\r\n          touched: false\r\n      }\r\n    },\r\n    formIsValid:false,\r\n    isSignUp:true\r\n  }\r\n  checkValidity(value, rules) {\r\n      let isValid = true;\r\n      if (!rules) {\r\n          return true;\r\n      }\r\n\r\n      if (rules.required) {\r\n          isValid = value.trim() !== '' && isValid;\r\n      }\r\n\r\n      if (rules.minLength) {\r\n          isValid = value.length >= rules.minLength && isValid\r\n      }\r\n\r\n      if (rules.maxLength) {\r\n          isValid = value.length <= rules.maxLength && isValid\r\n      }\r\n\r\n      if (rules.isEmail) {\r\n          const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n          isValid = pattern.test(value) && isValid\r\n      }\r\n\r\n      if (rules.isNumeric) {\r\n          const pattern = /^\\d+$/;\r\n          isValid = pattern.test(value) && isValid\r\n      }\r\n\r\n      return isValid;\r\n  }\r\n  submitHandler =(event) =>{\r\n      event.preventDefault();\r\n      this.props.onAuthStart(this.state.controls.email.value,this.state.controls.password.value,this.state.isSignUp)\r\n\r\n  }\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n      const updatedControls = {\r\n          ...this.state.controls\r\n      };\r\n      const updatedFormElement = {\r\n          ...updatedControls[inputIdentifier]\r\n      };\r\n      updatedFormElement.value = event.target.value;\r\n      updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n      updatedFormElement.touched = true;\r\n      updatedControls[inputIdentifier] = updatedFormElement;\r\n\r\n      let formIsValid = true;\r\n      for (let inputIdentifier in updatedControls) {\r\n          formIsValid = updatedControls[inputIdentifier].valid && formIsValid;\r\n      }\r\n      this.setState({controls: updatedControls, formIsValid: formIsValid});\r\n  }\r\n  switchAuthModeHandler =(event) =>{\r\n    event.preventDefault();\r\n    this.setState(prevState=>({\r\n      isSignUp:!prevState.isSignUp\r\n    }))\r\n\r\n  }\r\n  render() {\r\n    const formElementsArray = [];\r\n    for (let key in this.state.controls) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: this.state.controls[key]\r\n        });\r\n    }\r\n    let form = formElementsArray.map(formElement=>\r\n      (<Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />)\r\n    )\r\n    if(this.props.loading) form=<Spinner/>\r\n    return (\r\n      <div>\r\n        {this.props.isAuthenticated?<Redirect to='/'/>:''}\r\n        {this.props.error?`${this.props.error.message}`:''}\r\n        <form onSubmit={this.submitHandler} className={classes.AuthData}>\r\n          {form}\r\n          <Button btnType=\"Success\">SUBMIT</Button><br/>\r\n          <Button\r\n            btnType=\"Success\"\r\n            clicked={this.switchAuthModeHandler}\r\n            >SWITCH TO {this.state.isSignUp?'SIGN IN':'SIGN UP'}</Button>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps= state =>({\r\n  loading:state.auth.loading,\r\n  error:state.auth.error,\r\n  isAuthenticated:state.auth.token!==null\r\n})\r\nconst mapDispatchToProps = dispatch =>({\r\n  onAuthStart:(email,password,isSignUp)=> dispatch(actions.auth(email,password,isSignUp))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Auth,axios));\r\n"],"sourceRoot":""}